Module-4 (Ad. Selenium - Java For Web Driver)

1. Which components have you used in Load Runner?
-> 1. VuGen (Virtual User Generator) – for creating and editing scripts.
   2. Controller – for managing and executing load tests.
   3. Load Generators – for generating virtual users during tests.
   4. Analysis – for analyzing test results and performance metrics.
   5. MI Listener – for monitoring network traffic.

2. How can you set the number of Vusers in Load Runner?
-> The number of Vusers can be set using the Controller component. You configure the number of Vusers in the "Scenario Schedule" 
   section by defining the total Vusers, ramp-up time, and their distribution across load generators. You can also adjust Vusers 
   for different scenarios during runtime.

3. What is Correlation?
-> Correlation in LoadRunner is the process of capturing and dynamically handling values (like session IDs or tokens) that are 
   generated by the server and change with each user session. It ensures accurate test execution by replacing hardcoded values 
   with these dynamic ones during script playback.

4. What is the process for developing a Vuser Script?
-> The process for developing a Vuser script in LoadRunner includes the following steps:
   1. Record: Use VuGen (Virtual User Generator) to record user actions on the application.
   2. Enhance: Modify the recorded script by adding parameterization and correlation to handle dynamic values.
   3. Debug: Test the script in VuGen to ensure it runs correctly and resolves any errors.
   4. Save: Save the script and any associated files.
   5. Prepare: Load the script in the Controller for load testing.
   6. Execute: Run the script to simulate virtual user activity and collect performance data.

5. How Load Runner interacts with the application?
-> LoadRunner interacts with the application by simulating user actions through Vuser scripts. These scripts use protocols to 
   send requests to the server, mimicking real user behavior. LoadRunner captures responses from the server, allowing it to 
   measure performance metrics such as response time and throughput, while providing insights into how the application performs under load.

6. How many VUsers are required for load testing?
-> The number of Vusers required for load testing depends on several factors, including the application's expected user load, 
   performance objectives, and specific testing goals. It typically involves analyzing historical usage data, estimating peak usage, 
   and determining the required load to identify performance bottlenecks. It's best to start with a baseline and gradually increase Vusers 
   to simulate realistic conditions.

7. What is the relationship between Response Time and Throughput?
-> The relationship between response time and throughput is inversely proportional. **Response time** measures how long it takes 
   for a system to respond to a request, while **throughput** refers to the number of requests processed by the system in a given 
   time period. As throughput increases (more requests processed), response time may increase due to system strain, indicating that 
   higher load can lead to slower response times. Conversely, if response times are low, the system can typically handle higher throughput efficiently.

8. What is Automation Testing?
-> Automation testing is a software testing technique that uses specialized tools and scripts to automatically execute test cases, 
   compare actual outcomes with expected results, and report discrepancies. It aims to enhance testing efficiency, accuracy, and 
   coverage while reducing manual effort and human error in repetitive tasks. Automation is particularly useful for regression testing, 
   performance testing, and situations requiring frequent test execution.

9. Which Are The Browsers Supported By Selenium Ide?
-> Selenium IDE supports the following browsers:
   1. Google Chrome
   2. Mozilla Firefox
   3. Microsoft Edge
   Selenium IDE is primarily compatible with these browsers through extensions that facilitate the recording and playback of automated tests.

10. What are the benefits of Automation Testing?
-> The benefits of automation testing include:
   1. Increased Efficiency: Tests can be executed faster than manual testing, allowing for more tests to be run in less time.
   2. Reusability: Automated test scripts can be reused across different versions of the application, saving time and effort.
   3. Consistency: Automated tests eliminate human error, ensuring consistent execution of tests.
   4. Early Detection of Bugs: Automation enables continuous testing, allowing for early identification of defects in the development cycle.
   5. Cost-Effective in the Long Run: While initial setup costs may be high, automation reduces overall testing costs over time.
   6. Scalability: Automated tests can easily scale to accommodate large applications and extensive test suites.
   7. Improved Test Coverage: Automation allows for more comprehensive testing, covering a wider range of scenarios and edge cases.

11. What are the advantages of Selenium?
-> The advantages of Selenium include:
   1. Open Source: Selenium is free to use, which reduces costs for organizations.
   2. Cross-Browser Compatibility: It supports multiple browsers, including Chrome, Firefox, Safari, and Edge.
   3. Multi-Language Support: Selenium can be used with various programming languages like Java, C#, Python, and Ruby.
   4. Robust Framework: It supports integration with testing frameworks and tools like TestNG, JUnit, and Maven.
   5. Support for Multiple Platforms: Selenium can test web applications across different operating systems.
   6. Active Community: A large community provides extensive documentation, tutorials, and support.
   7. Flexible and Extensible: Users can create custom functions and integrate with other tools and libraries.
   8. Parallel Testing: It allows for executing tests in parallel, speeding up the testing process.

12. Why testers should opt for Selenium and not QTP?
-> Testers may opt for Selenium over QTP (Quick Test Professional) for several reasons:
   1. Cost: Selenium is open-source and free, while QTP is a commercial tool requiring a paid license.
   2. Cross-Browser Testing: Selenium supports multiple browsers, whereas QTP primarily focuses on Internet Explorer.
   3. Multi-Language Support: Selenium allows scripting in various programming languages (Java, C#, Python), while QTP uses VBScript.
   4. Flexibility: Selenium provides more flexibility for web application testing and integrates easily with other tools.
   5. Community Support: Selenium has a large and active community offering extensive resources and support.
   6. Continuous Integration: Selenium integrates well with CI/CD tools, enhancing automated testing in agile environments.
